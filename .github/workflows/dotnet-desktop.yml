name: WPF Release

on:
  push:
    branches: [ master ]
  # Do you really want to be doing signed builds with code signing on every pull request to master?
  # This will also fail if you are not the one who open the PR (pull request bulds do not have access to $secrets )
  #pull_request:
  #  branches: [ master ]

jobs:
  build:
    strategy:
      matrix:
        configuration:
        - Debug
        - Release

    runs-on: windows-latest  

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    # Install the .NET Core workload (IMPORTANRT: Use 1.7.2 or later)
    - name: Install .NET Core
      uses: actions/setup-dotnet@v1.7.2
      with:
        # Make sure you're using the verion that matches or newer than what your project needs
        dotnet-version: '3.1.302' 

    # Add  MSBuild to the PATH: (IMPORTANT be 1.0.2 or later)
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Path /t:Restore /p:Configuration=$env:Configuration
      env:
        Solution_Path: TestCorectAppWithCI.sln
        Configuration: ${{ matrix.configuration }}  

    # Decode the base 64 encoded pfx and save the file using the SigningCertificateFileName value for the file name
    - name: Decode the pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
        $certificatePath = Join-Path -Path $env:WAP_Project_Directory -ChildPath $env:SigningCertificateFileName
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)
      env:
        SigningCertificateFileName: GitHubActionsWorkflow.pfx
        WAP_Project_Directory: TestCorectAppWithCIWAP

    # Create the app package by building and packaging the Windows Application Packaging project
    - name: Create the app package
      run: msbuild $env:WAP_Project_Path /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=$env:SigningCertificateFileName /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
      env:
        WAP_Project_Path: TestCorectAppWithCIWAP/TestCorectAppWithCIWAP.wapproj 
        Configuration: ${{ matrix.configuration }}
        Appx_Package_Build_Mode: StoreUpload
        Appx_Bundle: Always
        Appx_Bundle_Platforms: x86|x64
        SigningCertificateFileName: GitHubActionsWorkflow.pfx

    # Remove the pfx
    - name: Remove the pfx
      run: Remove-Item -path $env:WAP_Project_Directory\$env:SigningCertificateFileName
      env:
        WAP_Project_Directory: TestCorectAppWithCIWAP
        SigningCertificateFileName: GitHubActionsWorkflow.pfx

    # Upload the MSIX package: https://github.com/marketplace/actions/upload-artifact
    - name: Upload build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: MSIX Package
        path: ${{ env.WAP_Project_Directory }}\AppPackages
      env:
        WAP_Project_Directory: TestCorectAppWithCIWAP
